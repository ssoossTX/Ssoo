import { useState, useCallback, useEffect } from "react";
import { GameData, UpgradeItem, AchievementItem } from "@shared/schema";
import { useToast } from "@/hooks/use-toast";

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const DEFAULT_GAME_STATE: GameData = {
  score: 0,
  perSecond: 0,
  level: 1,
  clickValue: 1
};

const DEFAULT_UPGRADES: UpgradeItem[] = [
  {
    id: "autotapper-1",
    type: "autoTapper",
    name: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä",
    description: "–ö–ª–∏–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É",
    cost: 10,
    baseValue: 0.1,
    icon: "‚ö°",
    count: 0
  },
  {
    id: "autotapper-2",
    type: "autoTapper",
    name: "–ú–∏–Ω–∏-—Ä–æ–±–æ—Ç",
    description: "–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∫–ª–∏–∫–∞—Ç—å",
    cost: 50,
    baseValue: 0.5,
    icon: "ü§ñ",
    count: 0
  },
  {
    id: "multiplier-1",
    type: "multiplier",
    name: "–£—Å–∏–ª–∏—Ç–µ–ª—å –∫–ª–∏–∫–æ–≤",
    description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–∫–∞",
    cost: 25,
    baseValue: 1,
    icon: "üí™",
    count: 0
  },
  {
    id: "special-1",
    type: "special",
    name: "–ë–æ–Ω—É—Å x2",
    description: "–£–¥–≤–∞–∏–≤–∞–µ—Ç –≤—Å–µ –∫–ª–∏–∫–∏ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥",
    cost: 100,
    baseValue: 2,
    icon: "‚≠ê",
    count: 0
  }
];

const DEFAULT_ACHIEVEMENTS: AchievementItem[] = [
  {
    id: "first-click",
    name: "–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫",
    description: "–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫",
    icon: "üéØ",
    unlocked: false
  },
  {
    id: "first-upgrade",
    name: "–ü–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ",
    description: "–ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ",
    icon: "üîß",
    unlocked: false
  },
  {
    id: "score-100",
    name: "–°–æ—Ç–Ω—è",
    description: "–ù–∞–±–µ—Ä–∏—Ç–µ 100 –æ—á–∫–æ–≤",
    icon: "üíØ",
    unlocked: false
  }
];

interface GameState {
  gameState: GameData;
  upgrades: UpgradeItem[];
  achievements: AchievementItem[];
  selectedUpgradeType: 'autoTapper' | 'multiplier' | 'special';
  isLoading: boolean;
  error: string | null;
  lastUpdate: number;
  handleClick: () => void;
  purchaseUpgrade: (upgradeId: string) => void;
  setSelectedUpgradeType: (type: 'autoTapper' | 'multiplier' | 'special') => void;
}

export function useStaticGame(): GameState {
  const { toast } = useToast();
  const [gameData, setGameData] = useState<GameData>({ ...DEFAULT_GAME_STATE });
  const [upgrades, setUpgrades] = useState<UpgradeItem[]>(DEFAULT_UPGRADES);
  const [achievements, setAchievements] = useState<AchievementItem[]>(DEFAULT_ACHIEVEMENTS);
  const [selectedUpgradeType, setSelectedUpgradeType] = useState<'autoTapper' | 'multiplier' | 'special'>('autoTapper');
  const [lastUpdate] = useState<number>(Date.now());

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
  const handleClick = useCallback(() => {
    setGameData(prevState => {
      const newScore = prevState.score + prevState.clickValue;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const newAchievements = [...achievements];
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫
      if (!newAchievements[0].unlocked) {
        newAchievements[0].unlocked = true;
        toast({
          title: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
          description: '–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫',
          duration: 3000,
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 100 –æ—á–∫–æ–≤
      if (newScore >= 100 && !newAchievements[2].unlocked) {
        newAchievements[2].unlocked = true;
        toast({
          title: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
          description: '–°–æ—Ç–Ω—è',
          duration: 3000,
        });
      }
      
      setAchievements(newAchievements);
      
      return {
        ...prevState,
        score: newScore,
      };
    });
  }, [achievements, toast]);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –æ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
  useEffect(() => {
    if (gameData.perSecond <= 0) return;
    
    const intervalId = setInterval(() => {
      setGameData(prevState => {
        const newScore = prevState.score + (prevState.perSecond / 10); // –î–µ–ª–∏–º –Ω–∞ 10, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª 100–º—Å
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 100 –æ—á–∫–æ–≤
        if (newScore >= 100) {
          const newAchievements = [...achievements];
          
          if (!newAchievements[2].unlocked) {
            newAchievements[2].unlocked = true;
            setAchievements(newAchievements);
            toast({
              title: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
              description: '–°–æ—Ç–Ω—è',
              duration: 3000,
            });
          }
        }
        
        return {
          ...prevState,
          score: newScore,
        };
      });
    }, 100);
    
    return () => clearInterval(intervalId);
  }, [gameData.perSecond, achievements, toast]);

  // –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
  const purchaseUpgrade = useCallback((upgradeId: string) => {
    const upgradeIndex = upgrades.findIndex(upgrade => upgrade.id === upgradeId);
    
    if (upgradeIndex === -1) return;
    
    const upgrade = upgrades[upgradeIndex];
    
    if (gameData.score < upgrade.cost) {
      toast({
        title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
        description: `–í–∞–º –Ω—É–∂–Ω–æ –µ—â–µ ${upgrade.cost - gameData.score} –æ—á–∫–æ–≤`,
        variant: 'destructive',
      });
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è
    setGameData(prevState => {
      const newState = { ...prevState };
      
      // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
      newState.score -= upgrade.cost;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–ª—É—á—à–µ–Ω–∏—è
      if (upgrade.type === 'autoTapper') {
        newState.perSecond += upgrade.baseValue;
      } else if (upgrade.type === 'multiplier') {
        newState.clickValue += upgrade.baseValue;
      }
      
      return newState;
    });
    
    setUpgrades(prevUpgrades => {
      const newUpgrades = [...prevUpgrades];
      newUpgrades[upgradeIndex] = {
        ...newUpgrades[upgradeIndex],
        count: newUpgrades[upgradeIndex].count + 1,
        cost: Math.floor(newUpgrades[upgradeIndex].cost * 1.2) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
      };
      return newUpgrades;
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ"
    const newAchievements = [...achievements];
    if (!newAchievements[1].unlocked) {
      newAchievements[1].unlocked = true;
      setAchievements(newAchievements);
      toast({
        title: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
        description: '–ü–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
        duration: 3000,
      });
    }
    
    toast({
      title: '–£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ!',
      description: `–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${upgrade.name}`,
      duration: 2000,
    });
  }, [gameData.score, upgrades, achievements, toast]);

  return {
    gameState: gameData,
    upgrades,
    achievements,
    selectedUpgradeType,
    isLoading: false,
    error: null,
    lastUpdate,
    handleClick,
    purchaseUpgrade,
    setSelectedUpgradeType
  };
}